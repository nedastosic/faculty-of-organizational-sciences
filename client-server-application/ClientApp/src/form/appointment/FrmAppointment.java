/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package form.appointment;

import controler.Controler;
import domain.Appointment;
import domain.AppointmentItem;
import domain.Dentist;
import domain.Patient;
import domain.Service;
import domain.util.AppointmentStatus;
import domain.util.GDOStatus;
import form.FrmMain;
import form.patient.FrmPatient;
import form.FrmSearch;
import java.awt.Color;
import java.io.IOException;
import java.time.Instant;
import java.time.LocalDate;
import java.time.LocalDateTime;
import java.time.LocalTime;
import java.time.ZoneId;
import java.time.ZoneOffset;
import java.util.ArrayList;
import java.util.Date;
import java.util.LinkedList;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import javax.swing.JSpinner;
import javax.swing.SpinnerDateModel;
import model.TableModelAppointmentItem;
import session.Session;
import usecase.UseCase;

/**
 *
 * @author NEDA
 */
public class FrmAppointment extends javax.swing.JDialog {

    Object parent;
    List<AppointmentItem> currentItems;

    /**
     * Creates new form FrmAppointment
     */
    public FrmAppointment(FrmMain parent, boolean modal) {
        super(parent, modal);
        this.parent = parent;
        initComponents();
        populateForm();
    }

    public FrmAppointment(FrmSearch parent, boolean modal) {
        super(parent, modal);
        this.parent = parent;
        initComponents();
        populateForm();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane2 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        pnlAppointment = new javax.swing.JPanel();
        lblPatient = new javax.swing.JLabel();
        lblDentist = new javax.swing.JLabel();
        cbDentist = new javax.swing.JComboBox<>();
        txtPatient = new javax.swing.JTextField();
        btnSearch = new javax.swing.JButton();
        lblDateAndTime = new javax.swing.JLabel();
        lblNote = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        txtNote = new javax.swing.JTextArea();
        dateTimePicker = new com.github.lgooddatepicker.components.DateTimePicker();
        jLabel1 = new javax.swing.JLabel();
        txtAmount = new javax.swing.JTextField();
        lblId = new javax.swing.JLabel();
        txtId = new javax.swing.JTextField();
        lblStatus = new javax.swing.JLabel();
        txtStatus = new javax.swing.JTextField();
        pnlItems = new javax.swing.JPanel();
        cbService = new javax.swing.JComboBox<>();
        lblService = new javax.swing.JLabel();
        btnAdd = new javax.swing.JButton();
        jScrollPane3 = new javax.swing.JScrollPane();
        tblItems = new javax.swing.JTable();
        btnRemove = new javax.swing.JButton();
        btnPlus = new javax.swing.JButton();
        btnMinus = new javax.swing.JButton();
        btnSave = new javax.swing.JButton();
        btnCancel = new javax.swing.JButton();
        btnEdit = new javax.swing.JButton();
        btnUpdate = new javax.swing.JButton();
        btnCreateInvoice = new javax.swing.JButton();
        btnCancelAppointment = new javax.swing.JButton();

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane2.setViewportView(jTable1);

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

        pnlAppointment.setBorder(javax.swing.BorderFactory.createTitledBorder("Appointment"));

        lblPatient.setText("Patient:");

        lblDentist.setText("Dentist:");

        cbDentist.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));

        txtPatient.setEditable(false);
        txtPatient.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                txtPatientKeyTyped(evt);
            }
        });

        btnSearch.setText("Search");
        btnSearch.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSearchActionPerformed(evt);
            }
        });

        lblDateAndTime.setText("Date and time:");

        lblNote.setText("Note:");

        txtNote.setColumns(20);
        txtNote.setRows(5);
        jScrollPane1.setViewportView(txtNote);

        jLabel1.setText("Total amount:");

        txtAmount.setEditable(false);

        lblId.setText("ID:");

        txtId.setEditable(false);

        lblStatus.setText("Status");

        txtStatus.setEditable(false);

        javax.swing.GroupLayout pnlAppointmentLayout = new javax.swing.GroupLayout(pnlAppointment);
        pnlAppointment.setLayout(pnlAppointmentLayout);
        pnlAppointmentLayout.setHorizontalGroup(
            pnlAppointmentLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlAppointmentLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(pnlAppointmentLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(pnlAppointmentLayout.createSequentialGroup()
                        .addGroup(pnlAppointmentLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(lblNote, javax.swing.GroupLayout.PREFERRED_SIZE, 84, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 84, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(lblDateAndTime, javax.swing.GroupLayout.PREFERRED_SIZE, 84, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(26, 26, 26)
                        .addGroup(pnlAppointmentLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jScrollPane1)
                            .addGroup(pnlAppointmentLayout.createSequentialGroup()
                                .addComponent(txtAmount, javax.swing.GroupLayout.PREFERRED_SIZE, 136, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(0, 0, Short.MAX_VALUE))
                            .addComponent(dateTimePicker, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                    .addGroup(pnlAppointmentLayout.createSequentialGroup()
                        .addComponent(lblDentist, javax.swing.GroupLayout.PREFERRED_SIZE, 92, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(cbDentist, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(pnlAppointmentLayout.createSequentialGroup()
                        .addGroup(pnlAppointmentLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(lblPatient, javax.swing.GroupLayout.PREFERRED_SIZE, 92, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(lblId, javax.swing.GroupLayout.PREFERRED_SIZE, 65, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(pnlAppointmentLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(pnlAppointmentLayout.createSequentialGroup()
                                .addComponent(txtId, javax.swing.GroupLayout.PREFERRED_SIZE, 135, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(92, 92, 92)
                                .addComponent(lblStatus, javax.swing.GroupLayout.PREFERRED_SIZE, 66, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(txtStatus))
                            .addComponent(txtPatient, javax.swing.GroupLayout.DEFAULT_SIZE, 400, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(btnSearch, javax.swing.GroupLayout.PREFERRED_SIZE, 151, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );
        pnlAppointmentLayout.setVerticalGroup(
            pnlAppointmentLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlAppointmentLayout.createSequentialGroup()
                .addContainerGap(23, Short.MAX_VALUE)
                .addGroup(pnlAppointmentLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblId)
                    .addComponent(txtId, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblStatus)
                    .addComponent(txtStatus, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(pnlAppointmentLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblPatient)
                    .addComponent(txtPatient, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnSearch))
                .addGap(18, 18, 18)
                .addGroup(pnlAppointmentLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblDentist)
                    .addComponent(cbDentist, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(pnlAppointmentLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblDateAndTime)
                    .addComponent(dateTimePicker, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(pnlAppointmentLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblNote))
                .addGap(18, 18, 18)
                .addGroup(pnlAppointmentLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(txtAmount, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );

        pnlItems.setBorder(javax.swing.BorderFactory.createTitledBorder("Appointment items"));

        cbService.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));

        lblService.setText("Service:");

        btnAdd.setText("Add ");
        btnAdd.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAddActionPerformed(evt);
            }
        });

        tblItems.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Title 1", "Title 2", "Title 3"
            }
        ));
        jScrollPane3.setViewportView(tblItems);

        btnRemove.setText("Remove");
        btnRemove.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnRemoveActionPerformed(evt);
            }
        });

        btnPlus.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        btnPlus.setText("+");
        btnPlus.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnPlusActionPerformed(evt);
            }
        });

        btnMinus.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        btnMinus.setText("-");
        btnMinus.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnMinusActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout pnlItemsLayout = new javax.swing.GroupLayout(pnlItems);
        pnlItems.setLayout(pnlItemsLayout);
        pnlItemsLayout.setHorizontalGroup(
            pnlItemsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlItemsLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(pnlItemsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(pnlItemsLayout.createSequentialGroup()
                        .addComponent(lblService, javax.swing.GroupLayout.PREFERRED_SIZE, 91, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(30, 30, 30))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, pnlItemsLayout.createSequentialGroup()
                        .addComponent(btnPlus, javax.swing.GroupLayout.PREFERRED_SIZE, 47, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnMinus, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)))
                .addGroup(pnlItemsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane3, javax.swing.GroupLayout.DEFAULT_SIZE, 550, Short.MAX_VALUE)
                    .addGroup(pnlItemsLayout.createSequentialGroup()
                        .addComponent(cbService, javax.swing.GroupLayout.PREFERRED_SIZE, 319, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(btnAdd, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(btnRemove, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );
        pnlItemsLayout.setVerticalGroup(
            pnlItemsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlItemsLayout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(pnlItemsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(cbService, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnAdd)
                    .addComponent(btnRemove)
                    .addComponent(lblService))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(pnlItemsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(btnPlus)
                    .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 167, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnMinus, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)))
        );

        btnSave.setText("Save ");
        btnSave.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSaveActionPerformed(evt);
            }
        });

        btnCancel.setText("Cancel");
        btnCancel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCancelActionPerformed(evt);
            }
        });

        btnEdit.setText("Edit");
        btnEdit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnEditActionPerformed(evt);
            }
        });

        btnUpdate.setText("Update");
        btnUpdate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnUpdateActionPerformed(evt);
            }
        });

        btnCreateInvoice.setText("Create invoice");
        btnCreateInvoice.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCreateInvoiceActionPerformed(evt);
            }
        });

        btnCancelAppointment.setText("Cancel appointment");
        btnCancelAppointment.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCancelAppointmentActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addComponent(pnlItems, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(pnlAppointment, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(btnCancel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(btnSave, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(btnEdit, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(btnUpdate, javax.swing.GroupLayout.DEFAULT_SIZE, 148, Short.MAX_VALUE)
                    .addComponent(btnCreateInvoice, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(btnCancelAppointment, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(23, 23, 23)
                        .addComponent(btnSave)
                        .addGap(23, 23, 23)
                        .addComponent(btnEdit)
                        .addGap(23, 23, 23)
                        .addComponent(btnUpdate)
                        .addGap(23, 23, 23)
                        .addComponent(btnCreateInvoice)
                        .addGap(15, 15, 15)
                        .addComponent(btnCancelAppointment)
                        .addGap(18, 18, 18)
                        .addComponent(btnCancel))
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(pnlAppointment, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(18, 18, 18)
                .addComponent(pnlItems, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnSearchActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSearchActionPerformed
        FrmSearch frmSearchPatients = new FrmSearch(this, true);
        frmSearchPatients.setVisible(true);
    }//GEN-LAST:event_btnSearchActionPerformed

    private void btnAddActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAddActionPerformed
        txtAmount.setText(((TableModelAppointmentItem) (tblItems.getModel())).addItem((Service) cbService.getSelectedItem()) + "");

    }//GEN-LAST:event_btnAddActionPerformed

    private void btnRemoveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnRemoveActionPerformed
        int selectedRow = tblItems.getSelectedRow();
        if (selectedRow < 0) {
            JOptionPane.showMessageDialog(null, "Please select item");
        } else {
            txtAmount.setText(((TableModelAppointmentItem) (tblItems.getModel())).removeItem(selectedRow) + "");

        }
    }//GEN-LAST:event_btnRemoveActionPerformed

    private void btnSaveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSaveActionPerformed
        try {
            if (required()) {
                if (validation()) {
                    Appointment appointment = createAppointmentFromInput();
                    Controler.getInstance().saveAppointment(appointment);
                    int response = JOptionPane.showConfirmDialog(null, "Appointment successfuly saved! Do you want to create another appointment?", "Confirm",
                            JOptionPane.YES_NO_OPTION, JOptionPane.QUESTION_MESSAGE);
                    if (response == JOptionPane.YES_OPTION) {
                        resetFields();
                    } else {
                        this.dispose();
                    }
                }
            } else {
                JOptionPane.showMessageDialog(null, "Please enter all required fields!");
            }

        } catch (ClassNotFoundException ex) {
            Logger.getLogger(FrmAppointment.class.getName()).log(Level.SEVERE, null, ex);
        } catch (Exception ex) {
            Logger.getLogger(FrmAppointment.class.getName()).log(Level.SEVERE, null, ex);
            JOptionPane.showMessageDialog(null, ex.getMessage());
        }
    }//GEN-LAST:event_btnSaveActionPerformed

    private void txtPatientKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtPatientKeyTyped
        txtPatient.setBackground(Color.white);
    }//GEN-LAST:event_txtPatientKeyTyped

    private void btnCancelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCancelActionPerformed
        this.dispose();
    }//GEN-LAST:event_btnCancelActionPerformed

    private void btnPlusActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnPlusActionPerformed
        int selectedRow = tblItems.getSelectedRow();
        if (selectedRow < 0) {
            JOptionPane.showMessageDialog(null, "Please select item");
        } else {
            txtAmount.setText(((TableModelAppointmentItem) (tblItems.getModel())).increaseQuantity(selectedRow)
                    + "");
            tblItems.setRowSelectionInterval(selectedRow, selectedRow);
        }
    }//GEN-LAST:event_btnPlusActionPerformed

    private void btnMinusActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnMinusActionPerformed
        int selectedRow = tblItems.getSelectedRow();
        if (selectedRow < 0) {
            JOptionPane.showMessageDialog(null, "Please select item");
        } else {
            txtAmount.setText(((TableModelAppointmentItem) (tblItems.getModel())).decreaseQuantity(selectedRow)
                    + "");
            tblItems.setRowSelectionInterval(selectedRow, selectedRow);
        }
    }//GEN-LAST:event_btnMinusActionPerformed

    private void btnEditActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnEditActionPerformed
        Session.getInstance().setCurrentUseCase(UseCase.UC_EDIT_APPOINTMENT);
        ((TableModelAppointmentItem) (tblItems.getModel())).setItemsAfterUpdate();
        makeEditable();
        dateTimePicker.setEnabled(true);

        btnEdit.setVisible(false);
        btnUpdate.setVisible(true);
        btnSave.setVisible(false);
        btnCreateInvoice.setVisible(false);
        dateTimePicker.setEnabled(true);

    }//GEN-LAST:event_btnEditActionPerformed

    private void btnUpdateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnUpdateActionPerformed
        try {
            if (required()) {
                if (validation()) {
                    Appointment a = createAppointmentFromInput();
                    ArrayList<AppointmentItem> items = (ArrayList<AppointmentItem>) ((TableModelAppointmentItem) (tblItems.getModel())).getItemsAfterUpdate();
                    adjustList(items);
                    Controler.getInstance().updateAppointment(a, items);
                    JOptionPane.showMessageDialog(null, "Appointment is successfully updated!");
                    ((FrmSearch) parent).dispose();
                }
            } else {
                JOptionPane.showMessageDialog(null, "Please enter all required fields!");
            }

        } catch (ClassNotFoundException ex) {
            Logger.getLogger(FrmAppointment.class.getName()).log(Level.SEVERE, null, ex);
        } catch (Exception ex) {
            Logger.getLogger(FrmAppointment.class.getName()).log(Level.SEVERE, null, ex);
        }

    }//GEN-LAST:event_btnUpdateActionPerformed

    private void btnCreateInvoiceActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCreateInvoiceActionPerformed
        int response = JOptionPane.showConfirmDialog(null, "Do you really want to create invoice?", "Confirm",
                JOptionPane.YES_NO_OPTION, JOptionPane.QUESTION_MESSAGE);
        if (response == JOptionPane.YES_OPTION) {
            Appointment a = createAppointmentFromInput();
            a.setAmount(Double.parseDouble(txtAmount.getText()));
            a.setAppointmentStatus(AppointmentStatus.PAID);
            this.dispose();
            try {
                Controler.getInstance().updateAppointment(a);
            } catch (ClassNotFoundException ex) {
                Logger.getLogger(FrmAppointment.class.getName()).log(Level.SEVERE, null, ex);
            } catch (Exception ex) {
                Logger.getLogger(FrmAppointment.class.getName()).log(Level.SEVERE, null, ex);
                JOptionPane.showMessageDialog(null, ex.getMessage());
            }
        } else {

        }

    }//GEN-LAST:event_btnCreateInvoiceActionPerformed

    private void btnCancelAppointmentActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCancelAppointmentActionPerformed
        int response = JOptionPane.showConfirmDialog(null, "Do you really want to cancel appointment?", "Confirm",
                JOptionPane.YES_NO_OPTION, JOptionPane.QUESTION_MESSAGE);
        if (response == JOptionPane.YES_OPTION) {
            Appointment a = createAppointmentFromInput();
            a.setAppointmentStatus(AppointmentStatus.CANCELED);
            a.setAmount(Double.parseDouble(txtAmount.getText()));
            this.dispose();
            try {
                Controler.getInstance().updateAppointment(a);
            } catch (ClassNotFoundException ex) {
                Logger.getLogger(FrmAppointment.class.getName()).log(Level.SEVERE, null, ex);
            } catch (Exception ex) {
                Logger.getLogger(FrmAppointment.class.getName()).log(Level.SEVERE, null, ex);
                JOptionPane.showMessageDialog(null, ex.getMessage());
            }
        } else {

        }
    }//GEN-LAST:event_btnCancelAppointmentActionPerformed

    /**
     * @param args the command line arguments
     */
    private String checkDateAndTime() {
        try {
//            if (dateTimePicker.getDatePicker().getDate() == null || dateTimePicker.getTimePicker().getTime() == null) {
//                //JOptionPane.showMessageDialog(null, "Please select date and time!");
//                return "Please select date and time!";
//            }
            LocalDateTime d = dateTimePicker.getDatePicker().getDate().atTime(dateTimePicker.getTimePicker().getTime());
            ZoneId zone = ZoneId.of("Europe/Belgrade");
            LocalDateTime now = LocalDateTime.now();
            ZoneOffset zoneOffSet = zone.getRules().getOffset(now);
            Instant i = d.toInstant(zoneOffSet);
            Date dd = Date.from(i);
            if (new Date().compareTo(dd) > 0) {
                return "Please enter valid date!";
            }
            if (Session.getInstance().getCurrentUseCase() == UseCase.UC_EDIT_APPOINTMENT) {
                Appointment current = (Appointment) Session.getInstance().getUseCaseParams();
                if (current.getDate().compareTo(dd) == 0) {
                    return "";
                }
            }
            List<Appointment> scheduledAppointments = Controler.getInstance().checkDentistAppointments();
            for (Appointment a : scheduledAppointments) {
                if (a.getDate().equals(dd)) {
                    //JOptionPane.showMessageDialog(null, "This date and time have already been reserved! Please select another one");
                    return "This date and time have already been reserved! Please select another one";
                }
            }
            //JOptionPane.showMessageDialog(null, "This time is available!");
//            btnCheck.setEnabled(false);
//            dateTimePicker.setEnabled(false);

        } catch (ClassNotFoundException ex) {
            Logger.getLogger(FrmAppointment.class.getName()).log(Level.SEVERE, null, ex);
        } catch (Exception ex) {
            Logger.getLogger(FrmAppointment.class.getName()).log(Level.SEVERE, null, ex);
        }
        return "";
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnAdd;
    private javax.swing.JButton btnCancel;
    private javax.swing.JButton btnCancelAppointment;
    private javax.swing.JButton btnCreateInvoice;
    private javax.swing.JButton btnEdit;
    private javax.swing.JButton btnMinus;
    private javax.swing.JButton btnPlus;
    private javax.swing.JButton btnRemove;
    private javax.swing.JButton btnSave;
    private javax.swing.JButton btnSearch;
    private javax.swing.JButton btnUpdate;
    private javax.swing.JComboBox<Object> cbDentist;
    private javax.swing.JComboBox<Object> cbService;
    private com.github.lgooddatepicker.components.DateTimePicker dateTimePicker;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JTable jTable1;
    private javax.swing.JLabel lblDateAndTime;
    private javax.swing.JLabel lblDentist;
    private javax.swing.JLabel lblId;
    private javax.swing.JLabel lblNote;
    private javax.swing.JLabel lblPatient;
    private javax.swing.JLabel lblService;
    private javax.swing.JLabel lblStatus;
    private javax.swing.JPanel pnlAppointment;
    private javax.swing.JPanel pnlItems;
    private javax.swing.JTable tblItems;
    private javax.swing.JTextField txtAmount;
    private javax.swing.JTextField txtId;
    private javax.swing.JTextArea txtNote;
    private javax.swing.JTextField txtPatient;
    private javax.swing.JTextField txtStatus;
    // End of variables declaration//GEN-END:variables

    private void populateForm() {
        tblItems.setModel(new TableModelAppointmentItem(new LinkedList<>()));
        setScreenLocation();
        populateCbDentist();
        populateCbServices();
        btnCancelAppointment.setVisible(false);
        switch (Session.getInstance().getCurrentUseCase()) {
            case UseCase.UC_NEW_APPOINTMENT:
                txtId.setVisible(false);
                lblId.setVisible(false);
                txtStatus.setVisible(false);
                lblStatus.setVisible(false);
                btnSearch.setVisible(true);
                dateTimePicker.setEnabled(true);
                makeEditable();
                break;
            case UseCase.UC_SEARCH_APPOINTMENT:
                txtId.setVisible(true);
                lblId.setVisible(true);
                txtStatus.setVisible(true);
                lblStatus.setVisible(true);
                btnEdit.setVisible(true);
                dateTimePicker.setEnabled(false);
                makeNotEditable();
                setAppointment();
                break;
        }

        JSpinner timeSpinner = new JSpinner(new SpinnerDateModel());
        JSpinner.DateEditor timeEditor = new JSpinner.DateEditor(timeSpinner, "HH:mm");
        timeSpinner.setEditor(timeEditor);
        timeSpinner.setValue(new Date());

    }

    private void makeNotEditable() {
        dateTimePicker.setEnabled(false);
        txtNote.setEnabled(false);
        cbService.setEnabled(false);
        cbDentist.setEnabled(false);
        btnSave.setVisible(false);
        btnAdd.setVisible(false);
        btnRemove.setVisible(false);
        btnEdit.setVisible(true);
        btnUpdate.setVisible(false);
        btnCancel.setVisible(true);
        btnPlus.setVisible(false);
        btnMinus.setVisible(false);
        btnCreateInvoice.setVisible(true);
    }

    private void makeEditable() {
        dateTimePicker.setEnabled(true);
        txtNote.setEnabled(true);
        cbService.setEnabled(true);
        cbDentist.setEnabled(true);
        btnSave.setVisible(true);
        btnAdd.setVisible(true);
        btnRemove.setVisible(true);
        btnEdit.setVisible(false);
        btnCreateInvoice.setVisible(false);
        btnUpdate.setVisible(false);
        btnCancel.setVisible(true);
        btnPlus.setVisible(true);
        btnMinus.setVisible(true);
    }

    private void setScreenLocation() {
        setLocationRelativeTo(null);
    }

    private void populateCbDentist() {
        try {
            cbDentist.removeAllItems();
            List<Dentist> list = Controler.getInstance().getAllDentists();
            for (Dentist dentist : list) {
                cbDentist.addItem(dentist);
            }
        } catch (IOException ex) {
            Logger.getLogger(FrmPatient.class.getName()).log(Level.SEVERE, null, ex);
        } catch (ClassNotFoundException ex) {
            Logger.getLogger(FrmPatient.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    private void populateCbServices() {
        try {
            cbService.removeAllItems();
            List<Service> list = Controler.getInstance().getAllServices();
            for (Service service : list) {
                cbService.addItem(service);
            }
        } catch (IOException ex) {
            Logger.getLogger(FrmPatient.class.getName()).log(Level.SEVERE, null, ex);
        } catch (ClassNotFoundException ex) {
            Logger.getLogger(FrmPatient.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    public void setPatient(Patient patient) {
        txtPatient.setBackground(Color.white);
        txtPatient.setText(patient.getJmbg() + " " + patient.getName() + " " + patient.getSurname());
        Session.getInstance().setUseCaseParams(patient);
    }

    private void setTableModel() {
        tblItems.setModel(new TableModelAppointmentItem(new LinkedList<>()));
    }

    private Appointment createAppointmentFromInput() {

        Appointment appointment = new Appointment();

        LocalDateTime d = dateTimePicker.getDatePicker().getDate().atTime(dateTimePicker.getTimePicker().getTime());
        ZoneId zone = ZoneId.of("Europe/Belgrade");
        LocalDateTime now = LocalDateTime.now();
        ZoneOffset zoneOffSet = zone.getRules().getOffset(now);
        Instant i = d.toInstant(zoneOffSet);
        Date dd = Date.from(i);
        appointment.setDate(dd);
        appointment.setDentist((Dentist) cbDentist.getSelectedItem());
        if (Session.getInstance().getCurrentUseCase() == UseCase.UC_NEW_APPOINTMENT) {
            appointment.setPatient((Patient) Session.getInstance().getUseCaseParams());
        } else {
            appointment.setPatient(new Patient(txtPatient.getText().split(" ")[0], txtPatient.getText().split(" ")[1], txtPatient.getText().split(" ")[2], null, null, null, null, null, null));
            appointment.setId(((Appointment) (Session.getInstance().getUseCaseParams())).getId());
        }
        appointment.setNote(txtNote.getText().trim());
        List<AppointmentItem> list = ((TableModelAppointmentItem) tblItems.getModel()).getItems();
        appointment.setItems(list);
        return appointment;

    }

    private void resetFields() {
        txtPatient.setText("");
        txtNote.setText("");
        dateTimePicker.getDatePicker().setDateToToday();
        dateTimePicker.getTimePicker().setTimeToNow();
        ((TableModelAppointmentItem) (tblItems.getModel())).removeAll();
        cbDentist.setSelectedIndex(0);
        cbService.setSelectedIndex(0);
    }

    private boolean required() {
        boolean ok = true;
        if (txtPatient.getText().isEmpty()) {
            ok = false;
            txtPatient.setBackground(Color.red);
        }
        return ok;
    }

    private boolean validation() {
        boolean ok = true;
        StringBuilder sb = new StringBuilder();

        if (((TableModelAppointmentItem) (tblItems.getModel())).getItems().isEmpty()) {
            sb.append("Please enter appointment items! ");
            ok = false;
        }
        String s = checkDateAndTime();
        if (!s.isEmpty()) {
            sb.append(s);
            ok = false;
        }
        if (!ok) {
            JOptionPane.showMessageDialog(null, sb.toString());
        }
        return ok;
    }

    private void setAppointment() {
        Appointment a = (Appointment) Session.getInstance().getUseCaseParams();
        txtId.setText(a.getId() + "");
        txtNote.setText(a.getNote());
        txtPatient.setText(a.getPatient().getJmbg() + " " + a.getPatient().getName() + " " + a.getPatient().getSurname());
        Date input = a.getDate();
        LocalDate date = input.toInstant().atZone(ZoneId.systemDefault()).toLocalDate();
        LocalTime time = input.toInstant().atZone(ZoneId.systemDefault()).toLocalTime();
        dateTimePicker.getDatePicker().setDate(date);
        dateTimePicker.getTimePicker().setTime(time);
        for (AppointmentItem ai : a.getItems()) {
            System.out.println(ai.getService().getName());
        }
        //((TableModelAppointmentItem) (tblItems.getModel())).refresh(a.getItems());
        tblItems.setModel(new TableModelAppointmentItem(a.getItems()));
        txtAmount.setText(((TableModelAppointmentItem) (tblItems.getModel())).getAmount() + "");
        switch (a.getAppointmentStatus()) {
            case SCHEDULED:
                btnEdit.setVisible(true);
                btnCreateInvoice.setVisible(true);
                btnCancelAppointment.setVisible(true);
                break;
            case PAID:
                btnEdit.setVisible(false);
                btnCreateInvoice.setVisible(false);
                btnCancelAppointment.setVisible(true);
                break;
            case CANCELED:
                btnEdit.setVisible(false);
                btnCreateInvoice.setVisible(false);
                btnCancelAppointment.setVisible(false);
                break;

        }
        btnSearch.setVisible(false);
        txtStatus.setText(a.getAppointmentStatus() + "");
    }

    private void adjustList(ArrayList<AppointmentItem> items) {

        ArrayList<AppointmentItem> before = (ArrayList<AppointmentItem>) ((TableModelAppointmentItem) (tblItems).getModel()).getItemsBeforeUpdate();
        for (AppointmentItem ai : items) {
            ai.setAppointment(Integer.parseInt(txtId.getText()));
            if (before.contains(ai)) {
                for (AppointmentItem bai : before) {
                    if (bai.equals(ai) && (bai.getQuantity() == ai.getQuantity())) {
                        items.remove(ai);
                        System.out.println(ai.getService().getName() + " ista kolicina");
                    }
                }
            } else {
                if (ai.getQuantity() == 0) {
                    //items.remove(ai);
                    ai.setStatus(GDOStatus.DEFAULT);
                    System.out.println(ai.getService().getName() + " obrisan jer nije bio u prvoj");
                }
            }
        }
        for (AppointmentItem ai : items) {
            System.out.println(ai.getService().getName() + " " + ai.getQuantity() + " " + ai.getStatus());
        }
    }

}
