/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package form;

import controler.Controler;
import domain.Appointment;
import domain.Patient;
import form.appointment.FrmAppointment;
import form.patient.FrmPatient;
import java.io.IOException;
import java.net.SocketException;
import java.util.LinkedList;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import model.TableModelAppointment;
import model.TableModelPatient;
import session.Session;
import usecase.UseCase;

/**
 *
 * @author NEDA
 */
public class FrmSearch extends javax.swing.JDialog {

    Object parent;

    /**
     * Creates new form FrmSearchPatients
     * @param parent
     */
    public FrmSearch(FrmAppointment parent, boolean modal) {
        super(parent, modal);
        this.parent = parent;
        initComponents();
        populateForm();
    }

    

    public FrmSearch(FrmMain parent, boolean modal) {
        super(parent, modal);
        this.parent = parent;
        initComponents();
        populateForm();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        tblResult = new javax.swing.JTable();
        lblCriterion = new javax.swing.JLabel();
        txtCriterion = new javax.swing.JTextField();
        btnSearch = new javax.swing.JButton();
        btnDetails = new javax.swing.JButton();
        btnCancel = new javax.swing.JButton();
        btnSelect = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Search patients");

        tblResult.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Title 1", "Title 2", "Title 3"
            }
        ));
        jScrollPane1.setViewportView(tblResult);

        lblCriterion.setText("Enter name and surname:");

        btnSearch.setText("Search");
        btnSearch.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSearchActionPerformed(evt);
            }
        });

        btnDetails.setText("Details");
        btnDetails.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDetailsActionPerformed(evt);
            }
        });

        btnCancel.setText("Cancel");
        btnCancel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCancelActionPerformed(evt);
            }
        });

        btnSelect.setText("Select");
        btnSelect.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSelectActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jScrollPane1)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(lblCriterion, javax.swing.GroupLayout.PREFERRED_SIZE, 176, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(txtCriterion, javax.swing.GroupLayout.DEFAULT_SIZE, 409, Short.MAX_VALUE)))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(btnSearch, javax.swing.GroupLayout.DEFAULT_SIZE, 73, Short.MAX_VALUE)
                    .addComponent(btnDetails, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(btnCancel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(btnSelect, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblCriterion)
                    .addComponent(txtCriterion, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnSearch))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 249, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addContainerGap())
                    .addGroup(layout.createSequentialGroup()
                        .addGap(18, 18, 18)
                        .addComponent(btnDetails)
                        .addGap(18, 18, 18)
                        .addComponent(btnCancel)
                        .addGap(18, 18, 18)
                        .addComponent(btnSelect)
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnSearchActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSearchActionPerformed
        try {
            String input = txtCriterion.getText().trim();
            String[] validate = validate(input);
            if (validate == null) {
                return;
            }
            String name = validate[0];
            String surname = validate[1];
            if (name == null || surname == null) {
                return;
            }
            if (Session.getInstance().getCurrentUseCase() == UseCase.UC_SEARCH_PATIENTS || Session.getInstance().getCurrentUseCase() == UseCase.UC_NEW_APPOINTMENT) {
                List<Patient> patients = Controler.getInstance().getSearchedPatients(name, surname);
                ((TableModelPatient) (tblResult.getModel())).refresh(patients);
            } else if (Session.getInstance().getCurrentUseCase() == UseCase.UC_SEARCH_APPOINTMENT) {
                List<Appointment> appointments = Controler.getInstance().getSearchedAppointments(name, surname);
                ((TableModelAppointment) (tblResult.getModel())).refresh(appointments);
            }
        } catch (IOException | ClassNotFoundException ex) {
            Logger.getLogger(FrmSearch.class.getName()).log(Level.SEVERE, null, ex);
        } catch (Exception ex) {
            Logger.getLogger(FrmSearch.class.getName()).log(Level.SEVERE, null, ex);
            JOptionPane.showMessageDialog(null, ex.getMessage());
            txtCriterion.setText("");
        }
    }//GEN-LAST:event_btnSearchActionPerformed

    private void btnCancelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCancelActionPerformed
        this.dispose();
    }//GEN-LAST:event_btnCancelActionPerformed

    private void btnDetailsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDetailsActionPerformed
        int selectedRow = tblResult.getSelectedRow();
        if (selectedRow < 0) {
            JOptionPane.showMessageDialog(null, "Please select patient!");
        } else {
            switch(Session.getInstance().getCurrentUseCase()){
                case UseCase.UC_NEW_APPOINTMENT:
                    viewPatient(selectedRow);
                    break;
                case UseCase.UC_SEARCH_PATIENTS:
                    viewPatient(selectedRow);
                    break;
                case UseCase.UC_SEARCH_APPOINTMENT:
                    viewAppointment(selectedRow);
                    break;
                    
            }
            
        }
    }//GEN-LAST:event_btnDetailsActionPerformed

   
    private void btnSelectActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSelectActionPerformed
        int selectedRow = tblResult.getSelectedRow();
        if (selectedRow < 0) {
            JOptionPane.showMessageDialog(null, "Please select patient");
        } else {
            switch (Session.getInstance().getCurrentUseCase()) {
                case UseCase.UC_NEW_APPOINTMENT:
                    ((FrmAppointment) parent).setPatient(((TableModelPatient) tblResult.getModel()).getPatient(selectedRow));
                    break;                
            }            
            this.dispose();
        }

    }//GEN-LAST:event_btnSelectActionPerformed

    /**
     * @param args the command line arguments
     */

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnCancel;
    private javax.swing.JButton btnDetails;
    private javax.swing.JButton btnSearch;
    private javax.swing.JButton btnSelect;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel lblCriterion;
    private javax.swing.JTable tblResult;
    private javax.swing.JTextField txtCriterion;
    // End of variables declaration//GEN-END:variables

    private void populateForm() {
        setLocationRelativeTo(null);
        int currentUsecase = Session.getInstance().getCurrentUseCase();
        switch (currentUsecase) {
            case UseCase.UC_SEARCH_PATIENTS:
                tblResult.setModel(new TableModelPatient((new LinkedList<>())));
                btnSelect.setVisible(false);
                lblCriterion.setText("Enter name and surname:");
                setTitle("Search patients");
                break;
            case UseCase.UC_NEW_APPOINTMENT:
                tblResult.setModel(new TableModelPatient((new LinkedList<>())));
                btnSelect.setVisible(true);
                lblCriterion.setText("Enter name and surname:");
                setTitle("Search patients");
                break;
            
            case UseCase.UC_SEARCH_APPOINTMENT:
                tblResult.setModel(new TableModelAppointment((new LinkedList<>())));
                btnSelect.setVisible(false);
                lblCriterion.setText("Enter patient's name and surname:");
                setTitle("Search appointments");
                break;
        }

    }

    private String[] validate(String input) {
        String[] result = new String[2];
        if (input.contains(" ")) {
            result[0] = input.split(" ")[0];
            result[1] = input.split(" ")[1];
        } else {
            JOptionPane.showMessageDialog(null, "Please enter name and surname");
            txtCriterion.setText("");
            return null;
        }
        return result;
    }

    void refresh(Patient patient) {
        ((TableModelPatient) (tblResult.getModel())).getPatients().remove(patient);
        ((TableModelPatient) (tblResult.getModel())).refresh();
    }

    private void viewAppointment(int selectedRow) {
        Appointment a = ((TableModelAppointment) (tblResult.getModel())).getAppointment(selectedRow);
        Session.getInstance().setUseCaseParams(a);
        FrmAppointment frmViewAppointment = new FrmAppointment(this, true);
        frmViewAppointment.setVisible(true);
    }
    
     private void viewPatient(int selectedRow) {
        Session.getInstance().setUseCaseParams(((TableModelPatient) (tblResult.getModel())).getPatient(selectedRow));
        FrmPatient frmViewPatient = new FrmPatient(this, true);
        frmViewPatient.setVisible(true);
    }


}
